// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

contract DepositFunds {
    mapping(address => uint) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw() public {
        // 先获取到调用者的余额 记为bal
        uint bal = balances[msg.sender];
        require(bal > 0);

        // 用call方法来转账 value的值是前面获取到的bal
        // 问题就出在这里 攻击者会部署一个合约 合约的fallback是一个payable的函数
        // fallback函数是在你没有传递任何calldata（也就是没有指定任何function identifier或parameter）的时候被调用
        // 这里就会调用到attacker的fallback函数 攻击合约中的fallback逻辑是如果被攻击合约的balance大于1，就嗲用withdraw函数把钱转给自己
        (bool sent, ) = msg.sender.call{value: bal}("");
        require(sent, "Failed to send Ether");

        balances[msg.sender] = 0;
    }


}

// notes:
// what is fallback function and when will it be called?
// https://www.geeksforgeeks.org/solidity-fall-back-function/#:~:text=The%20solidity%20fallback%20function%20is,plain%20Ether%20without%20any%20data.